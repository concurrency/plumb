--
--      Copyright (C) 2009-2010   Matt Jadud
--      Copyright (C)      2010   Michael Andrew Pirrone-Brusse
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--      You should have received a copy of the GNU General Public License
--      along with this program.  If not, see <http://www.gnu.org/licenses/>.

--** Common routines for configuring PWM on the ATmega family of processors.
--
-- The operation of PWMs might be improved and made to be significantly more
-- modular and robust if turned into a PROTOCOL based process.
-- This can be done Later.
--
-- @module pwm.common

#IF NOT (DEFINED (PWMCOMMON.MODULE))
#DEFINE PWMCOMMON.MODULE

--FIXME: MCJ
-- I would love to come up with a better naming convention
-- for the arch-specific part...
#INCLUDE "pwm.arch.module" 

--{{{ PROC set16 
--* Effectively sets a 16bit register.
-- The incoming INT is broken up into a pair BYTEs, each is then written
-- into a pair of adjacent registers that act as a single 16bit number.
--
-- We're operating under the assumption that the high byte is always one 
-- greater than the low byte.
-- Honestly not that trilled about it, but it seems to work.
--
-- An example:
-- [@item] OCR1A = OCR1AL
-- [@item] OCR1AL + 1 = OCR1AH
--
-- According to the datasheet, we always have to write the high byte first.
--
-- @param reg The [@em low] register to be written to -- The high register
--   (to which the higher-half of the INT gets written to) will be found
--   automagically.
-- @param val The value to be written into the register pair.
INLINE PROC set16 (VAL INT reg, VAL INT val)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    ports[reg+1] := (BYTE (val >> 8)) 
    ports[reg] := (BYTE (val BITAND #FF))
:
--}}}

--{{{ PROC pwm8.set.compare
--* Sets the compare register on the given PWM pin.
--
-- @param avr.pin The [@em AVR] pin to activate PWM on.
-- @param level The new level to set the compare register to.
PROC pwm8.set.compare (VAL INT avr.pin, VAL BYTE level)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  -- INITIAL INT OCRnx IS pwm8.compare.lookup (avr.pin):
  INT OCRnx:
  SEQ
    OCRnx := pwm8.compare.lookup (avr.pin)
    ports[OCRnx] := level
:
--}}}

--{{{ PROC pwm16.set.compare
--* Sets the compare register on the given PWM pin.
--
-- @param avr.pin The [@em AVR] pin to activate PWM on.
-- @param level The new level to set the compare register to.
PROC pwm16.set.compare (VAL INT avr.pin, VAL INT level)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  INITIAL INT OCRnx IS pwm16.compare.lookup (avr.pin):
  set16 (OCRnx, level)
:
--}}

--{{{ PROC pwm16.set.top
--* Sets the 'top' register on the given PWM pin. 
-- This effects the highest number the timer (which must be a 16 bit timer)
-- will count up to before beginning its down-count.
--
-- @param avr.pin The [@em AVR] pin to activate PWM on.
-- @param top The new top to set the 'top' register.
PROC pwm16.set.top (VAL INT avr.pin, VAL INT top)
  INITIAL INT ICRn IS pwm16.ICRn.lookup (avr.pin):
  set16 (ICRn, top)
:
--}}}


--{{{ PROC pwm8.setup
--* Sets up phase-correct Pulse Width Modulation on an 8 bit timer.
--
-- Be aware that not every pin on any given board or architecture
-- can be operated as a PWM Pin. Consult your board for information on which
-- pins can produce PWM.
-- 
-- @param avr.pin The [@em AVR] pin to activate PWM on.
-- @param prescale The prescaler value to set with PWM.
PROC pwm8.setup (VAL INT avr.pin, prescale)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  INT TCCRnA, TCCRnB, OCRnx:
  BYTE TCCRnA.bits, TCCRnB.bits:

  SEQ
    TCCRnA, TCCRnB, OCRnx, TCCRnA.bits, TCCRnB.bits := pwm8.lookup (avr.pin)
    TCCRnB.bits := pwm8.TCCRnB.helper (TCCRnB.bits, prescale)
    ports[TCCRnA] := ports[TCCRnA] \/ TCCRnA.bits
    ports[TCCRnB] := ports[TCCRnB] \/ TCCRnB.bits
    ports[OCRnx]  := 0
:
--}]}

--{{{ PROC pwm16.setup
--* Sets up phase-and-frequency-correct Pulse Width Modulation on a
-- 16 bit timer.
--
-- Be aware that not every pin on any given board or architecture
-- can be operated as a PWM Pin, and [@em not every PWM pin operates on a 16
-- bit timer].
--
-- Consult your board's reference manual for information on which pins can
-- produce 16 bit PWM.
-- 
-- @param avr.pin The [@em AVR] pin to activate PWM on.
-- @param prescale The prescaler value to set with PWM.
PROC pwm16.setup (VAL INT avr.pin, prescale)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  INT TCCRnA, TCCRnB, OCRnx:
  BYTE TCCRnA.bits, TCCRnB.bits:

  SEQ
    TCCRnA, TCCRnB, OCRnx, TCCRnA.bits, TCCRnB.bits := pwm16.lookup (avr.pin)
    TCCRnB.bits := pwm16.TCCRnB.helper (TCCRnB.bits, prescale)
    ports[TCCRnA] := ports[TCCRnA] \/ TCCRnA.bits
    ports[TCCRnB] := ports[TCCRnB] \/ TCCRnB.bits
    ports[OCRnx]  := 0
:
--}}}

#ENDIF
