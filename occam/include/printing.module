--
--	Copyright (C) 2009-2010   Christian Jacobsen
--      Copyright (C) 2009-2010   Matt Jadud
--      Copyright (C)      2010   Michael Andrew Pirrone-Brusse
--      Copyright (C) 2009-2010   Adam Sampson
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--      You should have received a copy of the GNU General Public License
--      along with this program.  If not, see <http://www.gnu.org/licenses/>.
--
--** Printing support for Plumbing
--
-- @module printing

#IF NOT (DEFINED (PRINTING.MODULE))
#DEFINE PRINTING.MODULE

VAL []INT dec.powers IS [10000, 1000, 100, 10, 1]:

VAL INT32 scaling.INT32 IS 10000:
VAL REAL32 scaling.REAL32 IS 10000.0:


--{{{ PROC serial.setup
--* Begins serial operations on the given board pin.
--
-- [@code board.pin] [@em must] be written as TX0, RX0, TX1, RX1, etc.
-- In the case of this process, RX0 and TX0 will both signal the activation
-- of serial port 0, as RX1 and TX1 will activate port 1, etc. the 'R' and 'T'
-- can be used interchangeably.
--
-- @param board.pin The board pin to being serial operations on.
-- @param baud The baud rate at which to transmit serial data.
PROC serial.setup (VAL INT board.pin, VAL INT32 baud)
  VAL INT port IS board.to.serial.port (board.pin):
  serial.start (port, baud)
:
--}}}

--{{{ PROC serial.read.byte
--* Reads a BYTE from the given pin.
--
-- [@code board.pin] [@em must] be written as TX0, RX0, TX1, RX1, etc.
--
-- @param board.pin The pin from which to read.
-- @param b The resulting byte from the read.
PROC serial.read.byte (VAL INT board.pin, RESULT BYTE b)
  VAL INT port IS board.to.serial.port (board.pin):
  serial.byte.in (port, b)
:
--}}}

--{{{ PROC serial.write.byte
--* Write a BYTE to the given pin.
--
-- [@code board.pin] [@em must] be written as TX0, RX0, TX1, RX1, etc.
--
-- @param board.pin The board pin to be written to.
-- @param b The BYTE to be written.
PROC serial.write.byte (VAL INT board.pin, VAL BYTE b)
  VAL INT port IS board.to.serial.port (board.pin):
  serial.byte.out (port, b)
:
--}}}

--{{{ PROC serial.write.int
--* Write an INT to the serial port in hex.
--
-- [@code board.pin] [@em must] be written as TX0, RX0, TX1, RX1, etc.
--
-- @param board.pin The board pin to be written to.
-- @param n The INT to write.
PROC serial.write.int (VAL INT board.pin, VAL INT n)
  VAL INT port IS board.to.serial.port (board.pin):
  VAL []BYTE digits IS "0123456789ABCDEF":
  SEQ i = 3 FOR 4 STEP -1
    serial.byte.out (port, digits[(n >> (i * 4)) /\ #F])
:
--}}}

--{{{ PROC serial.write.int32
--* Write an INT32 to the serial port in hex.
--
-- [@code board.pin] [@em must] be written as TX0, RX0, TX1, RX1, etc.
--
-- @param board.pin The board pin to be written to.
-- @param n The long integer (INT32) to write.
PROC serial.write.int32 (VAL INT board.pin, VAL INT32 n)
  VAL INT port IS board.to.serial.port (board.pin):
  VAL []BYTE digits IS "0123456789ABCDEF":
  SEQ i = 7 FOR 8 STEP -1
    serial.byte.out (port, digits[INT ((n >> (i * 4)) /\ #F)])
:
--}}}

--{{{ PROC serial.write.string
--* Write a string to the serial port.
--
-- [@code board.pin] [@em must] be written as TX0, RX0, TX1, RX1, etc.
--
-- @param board.pin The board pin to be written to.
-- @param string The array of BYTEs to write.
PROC serial.write.string (VAL INT board.pin, VAL []BYTE string)
  VAL INT port IS board.to.serial.port (board.pin):
  SEQ i = 0 FOR SIZE string
    serial.byte.out (port, string[i])
:
--}}}

--{{{ PROC serial.write.newline
--* Write a newline.
--
-- [@code board.pin] [@em must] be written as TX0, RX0, TX1, RX1, etc.
--
-- @param board.pin The board pin to be written to.
PROC serial.write.newline (VAL INT board.pin)
  VAL INT port IS board.to.serial.port (board.pin):
  serial.byte.out (port, '*n')
:
--}}}

--{{{ REAL32 Helper Functions
--* Fills the passed array with the [@em character] '0'.
--
-- @param arr The array to be filled with '0's.
PROC printing.zeroArray([]BYTE arr)
  SEQ i = 0 FOR (SIZE arr)
    arr[i] := '0'
:

--* Helps the user trim the trailing 0s from an array of BYTEs by
-- decrementing [@code total] by one for every consecutive '0' at the end
-- of the BYTE array.
--
-- @param arr The array of BYTEs to be processed.
-- @param total On completion of the PROC, this will be the number of
--   elements of the array useful to printing.
PROC printing.trimTrailing0s (VAL []BYTE arr, INT total)
  SEQ
    total := (SIZE arr)
    INITIAL BOOL REMOVING IS TRUE:
    SEQ i = ((SIZE arr) - 1) FOR (SIZE arr) STEP (- 1)
      SEQ
        IF
          REMOVING AND (arr[i] = '0')
            total := total - 1
          TRUE
            REMOVING := FALSE
:

--* Real 32 to array helper function.
--
-- Honestly, this is magic to me. You probably don't need to invoke this.
PROC printing.real32toa.helper (VAL INT lhs, []BYTE arr, INT length)
  [(SIZE dec.powers)]BYTE dest:
  INITIAL INT number IS lhs:
  SEQ
    SEQ i = 0 FOR (SIZE dec.powers)
      INT digit:
      SEQ
        digit := number / dec.powers[i]
        number := number REM dec.powers[i]
        dest[i] := (BYTE digit) + (BYTE '0')

    INITIAL BOOL LEADING IS TRUE:
    SEQ index = 0 FOR (SIZE dest)
      SEQ
        IF 
          LEADING AND (dest[index] = '0')
            SKIP
          LEADING AND (dest[index] <> '0')
            SEQ
              arr[length] := dest[index]
              length := length + 1
              LEADING := FALSE
          TRUE
            SEQ
              arr[length] := dest[index]
              length := length + 1
:
--}}}

--{{{ PROC real32toa
--* Converts [@code n] into a printable array.
-- The BYTE array [@code arr] and the INT [@code total] should be passed to
-- this process blank, as [@code arr] will be populated with printable
-- characters, and [@code total] will suggest the number of useful elements
-- to write.
--
-- @param n The REAL32 to be printed.
-- @param arr The [@em initially empty] array to be used for storing BYTEs
--   for printing.
-- @param total The [@em initially zero] INT that will store the total number
--   of elements of [@code arr] useful for printing.
PROC real32toa (VAL REAL32 n, []BYTE arr, INT total)
  INITIAL REAL32 scaled IS n * scaling.REAL32:
  INT32 lhs32:
  INT lhs:
  INITIAL INT length IS 0:
  SEQ
    printing.zeroArray(arr)
    scaled := n * scaling.REAL32 -- We scale twice? Not worried about overflow then?
    lhs32 := INT32 TRUNC scaled
    lhs := INT (lhs32 / scaling.INT32)
    printing.real32toa.helper(lhs, arr, length)
    arr[length] := '.'
    lhs32 := lhs32 - ((INT32 lhs) * scaling.INT32)
    INITIAL INT start IS (length + 1):
    SEQ
      printing.real32toa.helper((INT lhs32), arr, start)
      printing.trimTrailing0s(arr, total)
:
--}}}

PROC serial.write.dec.int (VAL INT port, VAL INT n)
  INITIAL INT index IS 0:
  INITIAL INT number IS n:
  INITIAL BOOL neg IS FALSE:
  IF
    n = 0
      serial.write.string (port, "0")
    TRUE
      SEQ
        IF
          n < 0
            SEQ
              neg := TRUE
              number := n * (- 1)
          TRUE
            SKIP
        IF 
          neg 
            serial.write.string (port, "-")
          TRUE 
            SKIP
        INITIAL BOOL LEADING IS TRUE:
        WHILE (index < 5)
          INT digit:
          SEQ
            digit := number / dec.powers[index]
            number := number REM dec.powers[index]
            IF
              LEADING AND (digit = 0)
                SKIP 
              (digit <> 0) OR (NOT LEADING) 
                SEQ
                  LEADING := FALSE
                  digit := digit + (INT '0')
                  serial.write.byte(port, (BYTE digit))
            index := index + 1
:

#IF FALSE
-- This puppy is broken. Not sure why.
--{{{ PROC serial.write.real32
--* Write a REAL32 to the serial port in decimal form.
--
-- [@code board.pin] [@em must] be written as TX0, RX0, TX1, RX1, etc.
--
-- @param board.pin The board pin to be written to.
-- @param n The code REAL32 to write.
-- @param precision The maximum length of the printed number.
PROC serial.write.real32 (VAL INT board.pin, VAL REAL32 n, VAL INT precision)
  VAL INT port IS board.to.serial.port (board.pin):
  [precision]BYTE arr:
  INT total:
  SEQ
    printing.zeroArray(arr)
    real32toa (n, arr, total)
    SEQ i = 0 FOR total
      serial.byte.out (port, arr[i])
:
--}}}
#ENDIF

#IF DEFINED (AVR.ATMEGA1280)
PROC serial.buffer.read (VAL INT board.pin, VAL BYTE start, end, RESULT []BYTE buffer, RESULT INT length)
  VAL INT port IS board.to.serial.port (board.pin):
  read.buffer.blocking (port, start, end, buffer, length)
:
#ENDIF

#ENDIF
