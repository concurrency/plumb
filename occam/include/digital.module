--
--	Copyright (C) 2009-2010   Christian Jacobsen
--      Copyright (C) 2009-2010   Matt Jadud
--      Copyright (C)      2010   Michael Andrew Pirrone-Brusse
--      Copyright (C) 2009-2010   Adam Sampson
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--      You should have received a copy of the GNU General Public License
--      along with this program.  If not, see <http://www.gnu.org/licenses/>.

--** Processes for manipulating digital pins.
--
-- @module digital

#IF NOT (DEFINED (DIGITAL.MODULE))
#DEFINE DIGITAL.MODULE

--* Symbolic constant for setting the level of a digital pin.
--
-- Can be
-- [@item] [@code VAL LEVEL HIGH] or
-- [@item] [@code VAL LEVEL LOW]
DATA TYPE LEVEL IS INT:
VAL LEVEL LOW IS #0:
VAL LEVEL HIGH IS #1:

--{{{ FUNCTION NOT (user defined operator: LEVEL->LEVEL)
--* Unary (logical) negation operator for the LEVEL type
-- Enables the use of [@code level := NOT level], where [@code level] 
-- is of type [@code LEVEL].
--
-- @private
-- @param l Input value
-- @returns HIGH if l is LOW, LOW otherwise
LEVEL INLINE FUNCTION "NOT" (VAL LEVEL level)
  LEVEL result:
  VALOF
    ASM
      LD level
      EQC 0
      ST result
-- The assembler code is equivalent to the following if, but takes 
-- 3 instructions rather than 10 for the if version
--    IF
--      l = LOW
--        result := HIGH
--      TRUE
--        result := LOW
    RESULT result
:
--}}}

--* Symbolic constant for setting data direction registers to input.
VAL INT INPUT IS #0:
--* Symbolic constant for setting data direction registers to output.
VAL INT OUTPUT IS #1:

--{{{ PROC digital.write
--* Sets the digital state of a pin to either HIGH or LOW.
--
-- @param board.pin The board pin to be set.
-- @param state The state to set -- Either HIGH or LOW.
PROC digital.write (VAL INT board.pin, VAL LEVEL state)
  INITIAL INT avr.pin IS board.to.chip(board.pin):
  --INT r.ddr, r.port, r.pin, bit:
  INT dummy1, r.port, dummy2, bit:
  SEQ
    --r.ddr, r.port, r.pin, bit := chip.to.gpio (avr.pin)
    dummy1, r.port, dummy2, bit := chip.to.gpio (avr.pin)
    pin.write(r.port, bit, (INT state))
:
--}}}

--{{{ PROC digital.read
--* Reads the digital state of a pin. Either HIGH or LOW.
--
-- @param board.pin The board pin to be read.
-- @param state The pin's current state -- Either HIGH or LOW.
PROC digital.read (VAL INT board.pin, RESULT LEVEL state)
  INITIAL INT avr.pin IS board.to.chip(board.pin):
  --INT r.ddr, r.port, r.pin, bit:
  INT dummy1, dummy2, r.pin, bit, state.tmp:
  SEQ
    --r.ddr, r.port, r.pin, bit := chip.to.gpio (avr.pin)
    dummy1, dummy2, r.pin, bit := chip.to.gpio (avr.pin)
    pin.read(r.pin, bit, state.tmp)
    state := (LEVEL state.tmp)
:
--}}}

--{{{ PROC digital.mode
--* Sets the Data Direction Register of the given pin (sets the flow of data)
-- to either INPUT or OUTPUT.
--
-- @param board.pin The board pin to set the direction of.
-- @param mode The mode to be set. Either INPUT or OUTPUT.
PROC digital.mode (VAL INT board.pin, mode)
  INITIAL INT avr.pin IS board.to.chip(board.pin):
  --INT r.ddr, r.port, r.pin, bit:
  INT r.ddr, dummy1, dummy2, bit:
  SEQ
    --r.ddr, r.port, r.pin, bit := chip.to.gpio (avr.pin)
    r.ddr, dummy1, dummy2, bit := chip.to.gpio (avr.pin)
    pin.mode(r.ddr, bit, mode)
:
--}}}

--{{{ PROC digital.output
--* Set digital levels on a pin.
-- Reads LEVEL values (LOW or HIGH) on the input channel, and sets the
-- value of the specified pin accordingly.
--
-- @param board.pin The Arduino pin number
-- @param in Pin levels (LOW or HIGH)
PROC digital.output (VAL INT board.pin, CHAN LEVEL in?)
  LEVEL v:
  SEQ
    in ? v
    digital.mode (board.pin, OUTPUT)
    WHILE TRUE
      SEQ
        digital.write (board.pin, v)
        in ? v
:
--}}}

--{{{ PROC digital.input
--* Read digital levels on external level interrupt pins.
-- This procedure will output a LEVEL (either LOW or HIGH) whenever the
-- pin changes value.
--
-- @param board.pin The pin number (pins 2 and 3 are safe choices).
-- @param out The LEVEL, output when the pin changes level.
PROC digital.input (VAL INT board.pin, CHAN LEVEL out!)
  INITIAL INT avr.pin IS board.to.chip(board.pin):
  INITIAL INT vintr IS (- 1):
  LEVEL wl:
  LEVEL level, last.level:

  PROC read ()
    SEQ
      digital.read (board.pin, wl)
      level := LEVEL wl
  :

  SEQ
    #PRAGMA DEFINED vintr
    set.interrups (avr.pin, vintr)
    read () --FIXME:Why is this its own process?
    last.level := level
    WHILE TRUE
      SEQ
        IF
          level <> last.level
            out ! level
          TRUE
            SKIP
        INT any:
        wait.for.interrupt (vintr, any)
        read ()
:
--}}}

#ENDIF
