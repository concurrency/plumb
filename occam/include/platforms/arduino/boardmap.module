--
--	Copyright (C) 2009-2010   Christian Jacobsen
--      Copyright (C) 2009-2010   Matt Jadud
--      Copyright (C)      2010   Michael Andrew Pirrone-Brusse
--      Copyright (C) 2009-2010   Adam Sampson
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--      You should have received a copy of the GNU General Public License
--      along with this program.  If not, see <http://www.gnu.org/licenses/>.

--** Occam header for Arduino specific pin mappings.
--
-- @module boardmap.arduino

#IF NOT (DEFINED (BOARDMAP.MODULE))
#DEFINE BOARDMAP.MODULE

#INCLUDE "constants.module"
#INCLUDE "base.module"

--{{{ board to Architecture Layout
-- board to Architecture layout w/ register names.
--
--B.pin   A.pin REG
--0(RX0)  2     PD0
--1(TX0)  3     PD1
--2       4     PD2
--3       5     PD3
--4       6     PD4
--5       11    PD5
--6       12    PD6
--7       13    PD7
--
--8       14    PB0
--9       15    PB1
--10      16    PB2
--11      17    PB3
--12      18    PB4
--13      19    PB5
--AREF
--GND
--
--a0(14)  23    PC0
--a1(15)  24    PC1
--a2(16)  25    PC2
--a3(17)  26    PC3
--a4(18)  27    PC4
--a5(19)  28    PC5
--}}}

--{{{ Symbolic Constants
--* Symbolic constant for accessing the first analog pin.
VAL INT A0 IS 14:
VAL INT A1 IS 15:
VAL INT A2 IS 16:
VAL INT A3 IS 17:
VAL INT A4 IS 18:
--* Symbolic constant for accessing the last analog pin.
--
-- Constants A1:4 do exist, they are simply not documented here for the
-- sake of saving space.
VAL INT A5 IS 19:

--* Symbolic constant for accessing read port 0.
VAL INT RX0 IS 0:
--* Symbolic constant for accessing transmit port 0.
VAL INT TX0 IS 1:

--* Symbolic constant for on-board LED pin.
VAL INT LED.PIN IS 13:
--}}}

--{{{ board to Architecture array map
-- Array (hand written) to convert Arduino pins to ATmega328p pins.
VAL []BYTE MAP IS [2,  3,  4,  5,  6,  11, 12, 13,
                   14, 15, 16, 17, 18, 19,
                   23, 24, 25, 26, 27, 28]:
--}}}

--{{{ FUNCTION board.to.chip
--* Arduino specific conversion function for finding
-- chip-specific pins from board-specific pin.
--
-- @param board.pin The board pin to be mapped to an AVR pin.
-- @return The AVR pin connected to the given board pin.
INT INLINE FUNCTION board.to.chip (VAL INT board.pin) IS (INT MAP[board.pin]):
--}}}

--{{{ FUNCTION board.analog.to.chip
--* Arduino specific conversion function for finding
-- chip-specific pins [@em specifically for analog pins].
--
-- If the user inputs 0-5, the appropriate analog pin number is substituted.
-- For example, if '3' is passed in as [@code board.analog.pin], A3 is
-- is substituted in before the lookup call. 
--
-- @param board.analog.pin The board pin to be mapped to an AVR pin.
-- @return The AVR pin connected to the given board pin.
INT INLINE FUNCTION board.analog.to.chip (VAL INT board.analog.pin)
  INT avr.pin:
  VALOF
    SEQ
      IF 
        board.analog.pin < 6
          avr.pin := board.to.chip (board.analog.pin + 14)
        TRUE
          avr.pin := board.to.chip (board.analog.pin)
    RESULT avr.pin
: 
--}}}

--{{{ FUNCTION board.to.serial.port
--* Arduino specific conversion function for finding
-- chip-specific pins [@em specifically for serial operations].
--
-- There's really only one serial port on the Arduino, so this is a stub
-- FUNCTION that's really just here to make sure the Arduino code complies
-- with the API adhered to by all platform boardmap.modules.
--
-- @param board.pin The board pin to be mapped to a serial port.
-- @return The serial port corresponding to the given board pin.
INT INLINE FUNCTION board.to.serial.port (VAL INT board.pin)
  INT serial.port:
  VALOF
    SEQ
      IF
        (board.pin =  0) OR (board.pin = 1)
          serial.port := 0
        TRUE
          die ("The given board pin is not connected to any Serial Ports.")
    RESULT serial.port
:
--}}}

#ENDIF
