--
--      Copyright (C) 2009-2010   Matt Jadud
--      Copyright (C)      2010   Michael Andrew Pirrone-Brusse
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--      You should have received a copy of the GNU General Public License
--      along with this program.  If not, see <http://www.gnu.org/licenses/>.

--** Procs for low-level digital manipulation of pins on any ATmega.
-- PROCs in this module take registers for direction (DDRn), pin (PINn)
-- and port (PORTn) to manipulate digital pins on ATmega processors.
--
-- @module pin

#IF NOT (DEFINED (REGISTER.MODULE))
#DEFINE REGISTER.MODULE

--{{{  PROC pin.write
--* Sets the state of a pin to either HIGH or LOW.
--
-- Typically, no user is going to directly call this PROC. The process of
-- locating r.port is taken care of in the Architecture-specific
-- chipmap.module. 
--
-- @param r.port The port (PORTB, PORTC, etc.) on the ATmega
-- @param bit The bit in the port (0 - 7)
-- @param state Either HIGH or LOW
INLINE PROC pin.write (VAL INT r.port, bit, state)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  ports[r.port] := (ports[r.port] /\ (~BV (bit))) \/ ((BYTE state) << bit)
:
--}}}

--{{{ PROC pin.read
--* Reads the state of a PIN register. Either HIGH or LOW.
--
-- Typically, no user is going to directly call this PROC. The process of
-- locating r.pin is taken care of in the Architecture-specific
-- chipmap.module. 
--
-- @param r.pin A pin register (PINA, PINB)
-- @param bit The bit in the port
-- @param state The state of the bit (HIGH or LOW)
INLINE PROC pin.read (VAL INT r.pin, bit, RESULT INT state)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  state := (INT ((ports[r.pin] /\ (BV (bit))) >> bit))
:
--}}}

--{{{ PROC pin.mode
--* Sets the direction of the pin (INPUT or OUTPUT)
--
-- Typically, no user is going to directly call this PROC. The process of
-- locating r.ddr is taken care of in the Architecture-specific
-- chipmap.module. 
--
-- @param r.ddr The data direction register (DDRA, etc.)
-- @param bit The bit in the register
-- @param mode Either INPUT or OUTPUT
INLINE PROC pin.mode (VAL INT r.ddr, bit, mode)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  ports[r.ddr] := (ports[r.ddr] /\ (~BV (bit))) \/ ((BYTE mode) << bit)
:
--}}}

#ENDIF
