--
--	Copyright (C) 2009-2010   Christian Jacobsen
--      Copyright (C) 2009-2010   Matt Jadud
--      Copyright (C)      2010   Michael Andrew Pirrone-Brusse
--      Copyright (C) 2009-2010   Adam Sampson
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--      You should have received a copy of the GNU General Public License
--      along with this program.  If not, see <http://www.gnu.org/licenses/>.

--** ADC routines for the ATmega644.
--
-- @module 328.adc

#IF NOT (DEFINED (ADC.MODULE))
#DEFINE ADC.MODULE

--FIXME: These are duplicated in plumbing.
-- I'm not sure where they should be defined

--* Symbolic constant for signaling the use the VCC voltage reference.
VAL INT VCC IS #0:
--* Symbolic constant for signaling the use the internal 1.1v reference.
VAL INT INTERNAL IS #1:
--* Symbolic constant for signaling the use the external AREF reference.
VAL INT AREF IS #2:

-- This value is used for calculating analog channel choice in adc.module
-- The AVR analog pins start at (AVR) pin 40 and count down.
-- PA0/ADC0/PCINT0    40
-- PA1/ADC1/PCINT1    39
-- ... etc ...
-- PA7/ADC7/PCINT7    33
VAL INT AVR.A0 IS 40:

--{{{ PROC adc.base
--* Perform an Analog-to-Digital Conversion on the given AVR pin, and writes
-- out the result.
--
-- @param avr.pin The [@em AVR pin] on which to perform the ADC.
-- @param ref Which voltage reference to use as the comparison. Can be VCC,
--   INTERNAL, or AREF.
-- @param v The INT that will be used to store the analog read.
PROC adc.base (VAL INT avr.pin, VAL INT ref, RESULT INT v)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  INT16 result:
  -- AVR pins for Analog start at pin 40 and go down.
  INITIAL INT a.pin IS AVR.A0 - avr.pin:
  SEQ
    -- Enable ADC; enable interrupt; clock prescale 128
    -- The '7' is == ADPS2 \/ ADPS1 \/ ADPS0 which sets the prescale to 128
    ports[ADCSRA] := (BV (ADEN) \/ BV (ADIE)) \/ 7
    -- Disable digital inputs on the ADC pin.
    ports[DIDR0] := ports[DIDR0] \/ BV (a.pin)

    -- Select the channel
    -- If we are using VCC as our reference, set bit REFS0.
    IF
      ref = VCC
        ports[ADMUX] := BV (REFS0) \/ (BYTE a.pin)
      ref = AREF
        ports[ADMUX] := (BYTE a.pin)
      TRUE -- ref = INTERNAL
        ports[ADMUX] := (BV (REFS0) \/ BV (REFS1)) \/ (BYTE a.pin)

    -- Start conversion
    ports[ADCSRA] := ports[ADCSRA] \/ BV (ADSC)
    WHILE ((ports[ADCSRA] /\ BV(ADSC)) = BV (ADSC))
      SKIP

    -- Read value
    -- (We can't do this by retyping ports, since that does a 16-bit read)
    [2]BYTE bytes RETYPES result:
    bytes[0], bytes[1] := ports[ADCL], ports[ADCH]

    v := (INT result)
:
--}}}

--{{{ PROC adc.aref
--* Helper function for performing an ADC using the AREF.
--
-- @param avr.pin The [@em AVR] pin on which to perform the ADC.
-- @param v The INT that will be used to store the analog read.
INLINE PROC adc.aref (VAL INT avr.pin, RESULT INT v)
  adc.base (avr.pin, AREF, v)
:
--}}}

--{{{ PROC adc.vcc
--* Helper function for performing an ADC using the VCC.
--
-- @param avr.pin The [@em AVR] pin on which to perform the ADC.
-- @param v The INT that will be used to store the analog read.
INLINE PROC adc.vcc (VAL INT avr.pin, RESULT INT v)
  adc.base (avr.pin, VCC, v)
:
--}}}

#ENDIF
